rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && 
        request.auth.token.admin == true;
    }
    
    function isOwner(userId) {
      return request.auth != null && 
        request.auth.uid == userId;
    }
    
    // Users can only access their own profile
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isAuthenticated() && 
        request.auth.uid == userId;
      allow delete: if false; // Soft delete only
    }
    
    // Batches - user scoped
    match /batches/{batchId} {
      allow read, list: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // System health - allow authenticated users to write (for testing), admin to read
    match /systemHealth/{document} {
      allow read: if isAuthenticated(); // Changed: Allow all authenticated users to read
      allow write: if isAuthenticated(); // Allow writing for tests
    }
    
    // Security scans - admin access
    match /securityScans/{scanId} {
      allow read, write: if isAdmin();
      allow delete: if false;
    }
    
    // Test results - ensure proper permissions
    match /testResults/{resultId} {
      allow read, list: if isAuthenticated(); // Allow reading and listing
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // Releases - tenant isolation with proper querying
    match /releases/{releaseId} {
      allow read: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || 
         resource.data.tenantId == request.auth.uid ||
         resource.data.userId == request.auth.uid);
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && 
        (request.resource.data.createdBy == request.auth.uid ||
         request.resource.data.userId == request.auth.uid);
      allow update: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid ||
         resource.data.userId == request.auth.uid);
      allow delete: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid ||
         resource.data.userId == request.auth.uid);
    }
    
    // Deliveries - use tenantId
    match /deliveries/{deliveryId} {
      // For read operations on specific documents
      allow read: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      // For list/query operations - allow authenticated users to query
      // The app will filter by tenantId in the query itself
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
    }
    
    // Delivery targets - use tenantId
    match /deliveryTargets/{targetId} {
      allow read, list: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
    }
    
    // Delivery history
    match /deliveryHistory/{historyId} {
      allow read, list: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      allow update: if false; // Immutable audit trail
      allow delete: if false;
    }
    
    // Locks collection
    match /locks/{lockId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if isAdmin(); // Only admin can delete locks
    }
    
    // Rate limiting collection - user scoped
    match /rateLimits/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Fingerprints - user scoped
    match /fingerprints/{fingerprintId} {
      allow read, list: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false; // Immutable
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Audio fingerprints - user scoped
    match /audioFingerprints/{fingerprintId} {
      allow read, list: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false; // Immutable
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Mail queue - Functions only
    match /mail/{mailId} {
      allow read, write: if false; // Only Cloud Functions
    }
    
    // Import jobs - user scoped
    match /importJobs/{jobId} {
      allow read, list: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Artists - user scoped
    match /artists/{artistId} {
      allow read, list: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Notifications - user scoped (using tenantId which is userId in single-tenant)
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow create, delete: if false; // Functions only
    }
    
    // Product metadata - readable by all authenticated users
    match /productMetadata/{upc} {
      allow read, write: if isAuthenticated();
    }
    
    // Receipts - user scoped (using tenantId)
    match /receipts/{receiptId} {
      allow read, list: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      allow update: if false; // Immutable
      allow delete: if false;
    }
    
    // Genre mappings
    match /genreMappings/{mappingId} {
      allow read, list: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}