rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Users - strict personal data protection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && 
        (!('role' in request.resource.data) || 
         request.resource.data.role == resource.data.role);
      allow delete: if false; // Soft delete only
    }
    
    // Invite codes - public read, admin write
    match /inviteCodes/{codeId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Releases - tenant isolation with ownership
    match /releases/{releaseId} {
      allow read: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || 
         resource.data.tenantId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.tenantId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid &&
        request.resource.data.createdBy == resource.data.createdBy;
      allow delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }
    
    // Delivery targets - strict tenant isolation
    match /deliveryTargets/{targetId} {
      allow read: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid &&
        request.resource.data.tenantId == resource.data.tenantId;
      allow delete: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
    }
    
    // Genre mappings - user-scoped
    match /genreMappings/{mappingId} {
      allow read: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid &&
        request.resource.data.tenantId == resource.data.tenantId;
      allow delete: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
    }
    
    // Deliveries - read-only for users, write via Functions only
    match /deliveries/{deliveryId} {
      allow read: if isAuthenticated() && 
        (resource.data.tenantId == request.auth.uid ||
         resource.data.createdBy == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow delete: if false; // Never delete delivery history
    }

    // Locks - managed by Functions
    match /locks/{lockId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid == request.resource.data.tenantId;
      allow delete: if isAuthenticated() && 
        (resource.data.expiresAt < request.time ||
         resource.data.tenantId == request.auth.uid);
    }

    // Fingerprints - user-scoped with validation
    match /fingerprints/{fingerprintId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.sha256 != null;
      allow update: if false; // Immutable
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Audio fingerprints - user-scoped
    match /audioFingerprints/{fingerprintId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false; // Immutable
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Test results - admin only write
    match /testResults/{resultId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // System health - public read, admin write
    match /systemHealth/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Receipts - tenant-scoped
    match /receipts/{receiptId} {
      allow read: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      allow update: if false; // Immutable
      allow delete: if false;
    }

    // Import jobs - user-scoped
    match /importJobs/{jobId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    // Delivery history - audit trail
    match /deliveryHistory/{historyId} {
      allow read: if isAuthenticated() && 
        resource.data.tenantId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.tenantId == request.auth.uid;
      allow update: if false; // Immutable audit trail
      allow delete: if false;
    }
    
    // Email queue - Functions only
    match /mail/{mailId} {
      allow read: if false;
      allow write: if false; // Only Cloud Functions
    }
    
    // Notifications - user-scoped
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId;
      allow create, delete: if false; // Functions only
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}