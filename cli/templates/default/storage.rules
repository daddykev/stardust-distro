rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidAudioFile() {
      return request.resource.contentType.matches('audio/.*') &&
             request.resource.size < 500 * 1024 * 1024; // 500MB limit
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function isValidERNFile() {
      return request.resource.contentType == 'text/xml' &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Test paths - simplified for testing
    match /test/{allPaths=**} {
      allow read, write: if isAuthenticated();
    }
    
    // Import paths - user-scoped for catalog migration
    match /imports/{userId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && 
        (isValidAudioFile() || isValidImageFile());
      allow delete: if isOwner(userId);
    }
    
    // Batch paths for migration workflow - more permissive
    match /batches/{batchId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (request.resource.size < 500 * 1024 * 1024); // Just check size limit
      allow delete: if isAuthenticated();
    }
    
    // User-scoped paths only
    match /users/{userId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && 
        (isValidAudioFile() || isValidImageFile() || isValidERNFile());
      allow delete: if isOwner(userId);
    }
    
    // Release assets - tenant-scoped
    match /releases/{userId}/{releaseId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
        (isValidAudioFile() || isValidImageFile());
      allow delete: if isOwner(userId);
    }
    
    // Delivery packages - read-only after creation
    match /deliveries/{deliveryId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if false; // Immutable
      allow delete: if false; // Keep for audit
    }
    
    // Temporary uploads - auto-cleanup after 24h
    match /temp/{userId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // Public assets (if needed)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Admin SDK only
    }
    
    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}